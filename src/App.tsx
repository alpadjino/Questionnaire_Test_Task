import { Provider } from 'react-redux';
import { Test } from './pages/Test';
import { rtkQueryStore } from './store/store';

//? 1. А если появятся другие типы вопросов – как хранить их данные в state?  
//! Если типы вопросов фиксированные, делаем через Union Types в TypeScript:
//! Базовый тип + расширения для каждого вида вопроса (выбор, мультивыбор, вопросы открытого типа).
//! Если типы могут добавляться динамически (например, с бекенда), то храним их в нормализованном виде, например:
//! - questions (текст + варианты ответов)
//! - answers отдельно
//! p.s. Но если типы заранее неизвестны, надо обдумать ситуации, которые могут вообще быть с командой

//? 2. Если анкета из нескольких страниц, как организовать структуру данных 
//? для хранения информации об ответах?
//! Можно хранить массив id страниц, где у каждого будет поле (массив) с вопросами, например questionsIds. 
//! Можно сохранять пагинацию и текущее местоположение также в redux и, например, когда страница будет полностью перехагружена
//! Сохранять через redux-persist и восстанавливать при монтировании компонента
//! https://redux.js.org/usage/structuring-reducers/normalizing-state-shape

//? 3. Можно ли отделить бизнес-логику работы фронтенда приложения 
//? (поведения разних типов вопросов) от отображения?
//! Можно попробовать создать хук через паттерн "стратегия", который будет содержать в себе базовую реализацию
//! и расширять его в нужных местах. Выносим обработку ответов в отдельные компоненты (они как раз таки будут бизнесовыми), например на уровень выше,
//! оставляя в dumb-компонентах только отображение. Прокидывать данные можно через сервис-слой, дабы оставить только передачу через пропы

const App = () => {
  return (
    <Provider store={rtkQueryStore}>
      <Test />
    </Provider>
  );
};

export default App;